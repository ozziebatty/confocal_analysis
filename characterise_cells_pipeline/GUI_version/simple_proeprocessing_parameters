print("Running")

import numpy as np
import tifffile
import pandas as pd
import os
from skimage.exposure import equalize_adapthist
from skimage import img_as_ubyte
import napari
from magicgui import magicgui
from cv2 import GaussianBlur
from magicgui.widgets import Container
from cellpose import models

print("Running improved preprocessing tool...")

# ====== STEP 1: FILE PATHS AND ERROR CHECKING ======
input_image_path = '/Users/oskar/Desktop/format_test/test.lsm'
input_processes_csv = '/Users/oskar/Desktop/format_test/processes.csv'
input_parameters_csv = '/Users/oskar/Desktop/format_test/parameters.csv'

z_slice, channel = 0, 0

# Error checking for files
for filepath in [input_image_path, input_processes_csv, input_parameters_csv]:
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"File not found: {filepath}")

# ====== STEP 2: LOAD DATA ======
try:
    # Load image
    image = tifffile.imread(input_image_path)
    print("Image loaded with shape (z, c, y, x):", image.shape, "dtype:", image.dtype)
    
    if len(image.shape) != 4:
        raise ValueError(f"Expected 4D image (z, c, y, x), got shape {image.shape}")
    
    total_z = image.shape[0]
    total_channels = image.shape[1]
    
    # Load configuration files
    try:
        processes_df = pd.read_csv(input_processes_csv)
        required_columns = ['Process', 'Selected']
        if not all(col in processes_df.columns for col in required_columns):
            raise ValueError(f"Processes CSV must contain columns: {required_columns}")
        
        parameters_df = pd.read_csv(input_parameters_csv)
        required_columns = ['Parameter', 'Process', 'Default Value', 'Min', 'Max']
        if not all(col in parameters_df.columns for col in required_columns):
            raise ValueError(f"Parameters CSV must contain columns: {required_columns}")
    except Exception as e:
        raise ValueError(f"Error loading CSV files: {str(e)}")
        
    # Get selected processes
    selected_processes = processes_df[processes_df['Selected'] == 'Yes']['Process'].tolist()
    if not selected_processes:
        print("Warning: No processes selected. Original image will be displayed.")
    else:
        print("Selected processing steps:", selected_processes)
        
except Exception as e:
    print(f"Error during initialization: {str(e)}")
    raise

# ====== STEP 3: DEFINE PROCESSING FUNCTIONS ======
def apply_CLAHE(image_slice, kernel_size=16, clip_limit=0.005):
    """Apply Contrast Limited Adaptive Histogram Equalization"""
    try:
        # Ensure parameters are valid
        kernel_size = max(3, int(kernel_size))
        clip_limit = max(0.001, float(clip_limit))
        return img_as_ubyte(equalize_adapthist(image_slice, 
                                             kernel_size=(kernel_size, kernel_size), 
                                             clip_limit=clip_limit))
    except Exception as e:
        print(f"Error applying CLAHE: {str(e)}")
        return image_slice

def apply_Gaussian(image_slice, kernel_size=11, sigma=0.4):
    """Apply Gaussian blur"""
    try:
        # Ensure kernel size is valid and odd
        kernel_size = max(3, int(kernel_size))
        if kernel_size % 2 == 0:
            kernel_size += 1
        sigma = max(0.1, float(sigma))
        return GaussianBlur(image_slice, ksize=(kernel_size, kernel_size), sigmaX=sigma)
    except Exception as e:
        print(f"Error applying Gaussian: {str(e)}")
        return image_slice

def apply_segmentation(image_slice, cell_diameter, flow_threshold, cellprob_threshold):
    print("applying segmenation")
    model = models.Cellpose(gpu=False, model_type='nuclei')  # Use 'cyto2' for segmentation
    segmented_channel_z_slice, flows, styles, diams = model.eval(
        image_slice,
        diameter=cell_diameter,
        flow_threshold=flow_threshold,
        cellprob_threshold=cellprob_threshold,
    )
    print("applied segmentation")
    return segmented_channel_z_slice

# ====== STEP 4: CREATE NAPARI VIEWER ======
viewer = napari.Viewer()

# Dictionary to store current parameter values
param_values = {}

# Initialize parameter values from the CSV
for _, row in parameters_df.iterrows():
    param_name = row['Parameter']
    default_value = row['Default Value']
    # Use default if value is NaN
    param_values[param_name] = default_value

print("param values")
print(param_values)

# ====== STEP 5: MAIN PROCESSING FUNCTION ======
@magicgui(
    z_slice={"label": "Z slice", "widget_type": "Slider", "min": 0, "max": total_z-1},
    channel={"label": "Channel", "widget_type": "Slider", "min": 0, "max": total_channels-1},
    call_button="Update View"
)
def update_view(z_slice=5, channel=0):
    """Main function to update the view based on selected slice and processing"""
    z_slice = z_slice
    channel = channel

    try:
        # Get the original slice
        original_slice = image[z_slice, channel, :, :]
        processed = original_slice.copy()
        
        for process in selected_processes:
            print(process)
            if process == 'CLAHE':
                kernel_size = int(param_values.get('CLAHE_kernel_size', 16))
                clip_limit = float(param_values.get('CLAHE_cliplimit', 0.005))
                processed = apply_CLAHE(processed, kernel_size, clip_limit)
                
            elif process == 'Gaussian':
                kernel_size = int(param_values.get('gaussian_kernel_size', 11))
                sigma = float(param_values.get('gaussian_sigma', 0.4))
                processed = apply_Gaussian(processed, kernel_size, sigma)
        
        # Update viewer
        viewer.add_image(processed)
            
        return True
    except Exception as e:
        print(f"Error updating view: {str(e)}")
        return False

# ====== STEP 6: CREATE GROUPED PARAMETER WIDGETS ======
# Group widgets by process
process_widgets = {}

# CLAHE parameters widget group
if 'CLAHE' in selected_processes:
    # Get CLAHE parameters from DataFrame
    clahe_params = parameters_df[parameters_df['Process'] == 'CLAHE']
    
    # Create CLAHE container widget
    @magicgui(
        kernel_size={"label": "Kernel Size", "widget_type": "Slider", 
                   "min": int(clahe_params[clahe_params['Parameter'] == 'CLAHE_kernel_size']['Min'].values[0]), 
                   "max": min(100, int(clahe_params[clahe_params['Parameter'] == 'CLAHE_kernel_size']['Max'].values[0])), 
                   "step": 1},
        clip_limit={"label": "Clip Limit", "widget_type": "FloatSlider", 
                  "min": float(clahe_params[clahe_params['Parameter'] == 'CLAHE_cliplimit']['Min'].values[0]), 
                  "max": min(0.1, float(clahe_params[clahe_params['Parameter'] == 'CLAHE_cliplimit']['Max'].values[0])), 
                  "step": 0.001},
        #call_button="Apply CLAHE"
    )
    def apply_clahe_widget(kernel_size=16, clip_limit=0.005):
        try:
            param_values['CLAHE_kernel_size'] = kernel_size
            param_values['CLAHE_cliplimit'] = clip_limit
            print(f"CLAHE parameters updated: kernel_size={kernel_size}, clip_limit={clip_limit}")
            update_view()
            return True
        except Exception as e:
            print(f"Error updating CLAHE parameters: {str(e)}")
            return False
    
    process_widgets['CLAHE'] = apply_clahe_widget

# Gaussian parameters widget group
if 'Gaussian' in selected_processes:
    # Get Gaussian parameters from DataFrame
    gaussian_params = parameters_df[parameters_df['Process'] == 'gaussian']
    
    # Create Gaussian container widget
    @magicgui(
        kernel_size={"label": "Kernel Size", "widget_type": "Slider", 
                   "min": int(gaussian_params[gaussian_params['Parameter'] == 'gaussian_kernel_size']['Min'].values[0]), 
                   "max": min(31, int(gaussian_params[gaussian_params['Parameter'] == 'gaussian_kernel_size']['Max'].values[0])), 
                   "step": 2},  # Step by 2 to keep it odd
        sigma={"label": "Sigma", "widget_type": "FloatSlider", 
             "min": float(gaussian_params[gaussian_params['Parameter'] == 'gaussian_sigma']['Min'].values[0]), 
             "max": min(5.0, float(gaussian_params[gaussian_params['Parameter'] == 'gaussian_sigma']['Max'].values[0])), 
             "step": 0.1},
        #call_button="Apply Gaussian"
    )
    def apply_gaussian_widget(kernel_size=11, sigma=0.4):
        try:
            # Ensure kernel is odd
            if kernel_size % 2 == 0:
                kernel_size += 1
            
            param_values['gaussian_kernel_size'] = kernel_size
            param_values['gaussian_sigma'] = sigma
            print(f"Gaussian parameters updated: kernel_size={kernel_size}, sigma={sigma}")
            update_view()
            return True
        except Exception as e:
            print(f"Error updating Gaussian parameters: {str(e)}")
            return False
    
    process_widgets['Gaussian'] = apply_gaussian_widget

if 'Cellpose nuclear segmentation' in selected_processes:
        # Get segmentation parameters from DataFrame
    segmentation_params = parameters_df[parameters_df['Process'] == 'segmentation']
    
    # Create Gaussian container widget
    @magicgui(
        cell_diameter={"label": "Cell diameter", "widget_type": "FloatSlider", 
                   "min": float(segmentation_params[segmentation_params['Parameter'] == 'cell_diameter']['Min'].values[0]), 
                   "max": min(31, int(segmentation_params[segmentation_params['Parameter'] == 'cell_diameter']['Max'].values[0])), 
                   "step": 0.1},
        flow_threshold={"label": "Flow threshold", "widget_type": "FloatSlider", 
                    "min": float(segmentation_params[segmentation_params['Parameter'] == 'flow_threshold']['Min'].values[0]), 
                    "max": min(5.0, float(segmentation_params[segmentation_params['Parameter'] == 'flow_threshold']['Max'].values[0])), 
                    "step": 0.01},
        cellprob_threshold={"label": "Cell probability threshold", "widget_type": "FloatSlider", 
                    "min": float(segmentation_params[segmentation_params['Parameter'] == 'cellprob_threshold']['Min'].values[0]), 
                    "max": min(5.0, float(segmentation_params[segmentation_params['Parameter'] == 'cellprob_threshold']['Max'].values[0])), 
                    "step": 0.01},

        call_button="Run Segmentation"
    )

    def apply_segmentation_widget(cell_diameter=8, flow_threshold=0.5, cellprob_threshold=0.5):
        try:
            param_values['cell_diameter'] = cell_diameter
            param_values['flow_threshold'] = flow_threshold
            param_values['cellprob_threshold'] = cellprob_threshold
            print("help")

            original_slice = image[z_slice, channel, :, :]
            processed = original_slice.copy()

            processed = apply_segmentation(processed, cell_diameter, flow_threshold, cellprob_threshold)
            viewer.add_image(processed)

            return True
        except Exception as e:
            print(f"Error during Segmenation: {str(e)}")
            return False
    
    process_widgets['segmentation'] = apply_segmentation_widget

# ====== STEP 7: SAVE PARAMETERS FUNCTION ======
@magicgui(call_button="Save Parameters")
def save_parameters():
    try:
        # Update parameters DataFrame with current values
        for param_name, value in param_values.items():
            mask = parameters_df['Parameter'] == param_name
            if any(mask):
                parameters_df.loc[mask, 'Value'] = value
        
        # Save to CSV
        output_path = os.path.join(os.path.dirname(input_parameters_csv), 'parameters_updated.csv')
        parameters_df.to_csv(output_path, index=False)
        print(f"Parameters saved successfully to {output_path}")
        return True
    except Exception as e:
        print(f"Error saving parameters: {str(e)}")
        return False

# ====== STEP 8: ADD WIDGETS TO VIEWER ======
# Add the main processing widget
viewer.window.add_dock_widget(update_view, name="Slice Selection")

# Add process parameter widgets
for process_name, widget in process_widgets.items():
    viewer.window.add_dock_widget(widget, name=f"{process_name} Parameters")

# Add save button
viewer.window.add_dock_widget(save_parameters, name="Save Parameters")

# Initialize the view
update_view()

# Start the application
napari.run()