import os
from readlif.reader import LifFile
import tifffile
import numpy as np

# Input parameters
input_path = r"Y:\Room225_SharedFolder\Leica_Stellaris5_data\Gastruloids\oskar\SBSO_OPP_NM_two.lif"
output_dir = r"Y:\Room225_SharedFolder\Leica_Stellaris5_data\Gastruloids\oskar\analysis\SBSO_OPP_NM_two"
scene_idx = 35
num_channels = 5

# Create output directory if it doesn't exist
os.makedirs(output_dir, exist_ok=True)

# Load the LIF file
lif = LifFile(input_path)
print(f"Loaded LIF file with {len(lif.image_list)} images")

# Get the scene
scene = lif.get_image(scene_idx)
print(f"Scene {scene_idx}: dims={scene.dims}, channels={scene.channels}, nz={scene.nz}")

# Build corrected 4D array: [channels, z, y, x]
img_stack = []

for true_channel in range(num_channels):
    z_stack = []
    for z in range(scene.nz):
        # Calculate the scrambled channel index for this z and true channel
        # Pattern: 0, 2, 4, 1, 3, 0, 2, 4, 1, 3, ...
        # This is: (true_channel * 2 + z * 2) % num_channels
        scrambled_channel = (true_channel * 2 + z * 2) % num_channels
        
        #print(f"True channel {true_channel}, Z {z} -> using scrambled channel {scrambled_channel}")
        
        # Get frame with the scrambled channel index
        frame = scene.get_frame(z=z, t=0, c=scrambled_channel)
        z_stack.append(np.array(frame))
    
    img_stack.append(np.array(z_stack))

# Convert to numpy array: shape = [channels, z, y, x]
img_data = np.array(img_stack)

# Create output filename
output_path = os.path.join(output_dir, f"scene_{scene_idx:02d}_corrected.tiff")

# Save as TIFF with proper dimension order
tifffile.imwrite(output_path, img_data, imagej=True)
print(f"Saved scene {scene_idx} with shape {img_data.shape} to {output_path}")

print("Done!")